#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')
require 'gli'
require 'jira_client'
require 'yaml'
require 'colorize'
require 'jiraa'

include GLI::App

program_desc 'Command line application for accessing the Jira 5 API'

desc 'Display version information'
version Jiraa::VERSION

desc 'The base URL of your Jira instance (e.g. https://jira.company.com)'
arg_name 'URL'
flag [:U,:url]

desc 'The port your Jira instance is running on'
arg_name 'PORT'
flag [:P, :port]

desc 'Your Jira username (if using HTTP basic authentication)'
arg_name 'USERNAME'
flag [:u,:username]

desc 'Your Jira password (if using HTTP basic authentication)'
arg_name 'PASSWORD'
flag [:p,:password]

desc 'Your Jira certificate (if using SSL authentication)'
arg_name 'CERTIFICATE'
flag [:C,:certificate]

desc 'Resolve an issue'
arg_name 'ISSUE'
command :resolve do |c|
  c.desc 'Specify the issue resolution'
  c.default_value 'Fixed'
  c.arg_name 'RESOLUTION'
  c.flag [:a, "resolve-as"]

  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.desc 'Log work on the issue before resolving'
  c.arg_name 'TIME'
  c.flag [:l, "log-work"]

  c.desc 'Set remaining estimate to zero'
  c.switch :Z

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {
      :as => options[:a]
    }
    params[:comment] = options[:comment] unless options[:comment].nil?
    if options["log-work"] or options[:Z]
      time = options["log-work"] || "1m"
      if options[:Z]
        params = {
          :remaining_estimate => 0
        }
      end
      JiraClient.create_worklog args[0], time, params
      puts "Logged #{time} on #{args[0]}"
    end
    JiraClient.resolve_issue args[0], params
    puts "Resolved #{args[0]} as #{options[:a]}"
  end
end

desc 'Close an issue'
arg_name 'ISSUE'
command :close do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    JiraClient.close_issue args[0], params
  end
end

desc 'Re-open an issue'
arg_name 'ISSUE'
command :reopen do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    JiraClient.reopen_issue args[0], params
    puts "#{args[0]} re-opened"
  end
end

desc 'Start progress on an issue'
arg_name 'ISSUE'
command "start-progress" do |c|
  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    JiraClient.start_progress_on_issue args[0]
    puts "Progress started on #{args[0]}"
  end
end

desc 'Log work on an issue'
arg_name 'ISSUE TIME'
command "log-work" do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.desc 'Set remaining estimate'
  c.arg_name 'TIME'
  c.flag [:r, "remaining-estimate"]

  c.action do |global_options, options, args|
    help_now! "Missing issue key" if args.length == 0
    help_now! "Missing time" if args.length == 1
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    params[:remaining_estimate] = options["remaining-estimate"] unless options["remaining-estimate"].nil?
    JiraClient.create_worklog(args[0], args[1], params)
    puts "Logged #{args[1]} on #{args[0]}"
  end
end

desc 'Display information about Jira'
command :info do |c|
  c.action do |global_options,options,args|
    Jiraa::Common.server_info
  end
end

desc 'Display detailed information about an issue'
arg_name 'ISSUE'
command :show do |c|

  c.desc 'Display subtasks'
  c.switch [:s, :subtasks]

  c.desc 'Display description'
  c.default_value true
  c.switch [:d, :description]

  c.desc 'Display comments'
  c.switch [:c, :comments]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    fields = [:summary, :status, :issuetype, :assignee]
    fields << :description if options[:description]
    fields << :subtasks if options[:subtasks]
    fields << :comment if options[:comments]
    issue = JiraClient.find_issue_by_key(args[0], :fields => fields)
    formatter = Jiraa::Formatters::Issue.new(issue, options)
    formatter.format
  end
end

desc 'Search for issues using JQL'
arg_name 'JQL'
command :search do |c|
  c.action do |global_options,options,args|
    help_now! "Missing JQL statement" if args.length == 0
    Jiraa::Common.search_issues(args[0])
  end
end

desc 'Display issues currently in progress and assigned to you'
command :current do |c|
  c.action do |global_options,options,args|
    Jiraa::Common.current_issues
  end
end

desc 'Comment on an issue'
arg_name 'ISSUE COMMENT'
command :comment do |c|
  c.action do |global_options, options, args|
    help_now! unless args.length == 2
    JiraClient.comment_on_issue(args[0], args[1])
    puts "Commented on #{args[0]}"
  end
end

desc 'Tell Jira how you feel about it'
arg_name 'EXPLETIVE...'
command :rant do |c|
  c.action do |global_options,options,args|
    help_now! "Missing expletives" if args.length == 0
    raise "503 Service Unavailable"
  end
end

pre do |global,command,options,args|
  Jiraa::Configuration.init(global)
  true
end

exit run(ARGV)
