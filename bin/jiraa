#!/usr/bin/env ruby
require 'gli'
require 'jira_client'
require 'yaml'
require 'colorize'
begin # XXX: Remove this begin/rescue before distributing your app
require 'jiraa'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/jiraa` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/jiraa now"
  exit 64
end

include GLI::App

program_desc 'Command line application for accessing the Jira 5 API'

desc 'Display version information'
version Jiraa::VERSION


desc 'The base URL of your Jira instance (e.g. https://jira.company.com)'
arg_name 'URL'
flag [:U,:url]

desc 'The port your Jira instance is running on'
arg_name 'PORT'
flag [:P, :port]

desc 'Your Jira username (if using HTTP basic authentication)'
arg_name 'USERNAME'
flag [:u,:username]

desc 'Your Jira password (if using HTTP basic authentication)'
arg_name 'PASSWORD'
flag [:p,:password]

desc 'Your Jira certificate (if using SSL authentication)'
arg_name 'CERTIFICATE'
flag [:C,:certificate]

desc 'Resolve an issue'
arg_name 'ISSUE'
command :resolve do |c|
  c.desc 'Specify the issue resolution'
  c.default_value 'Fixed'
  c.arg_name 'RESOLUTION'
  c.flag [:a, "resolve-as"]

  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.desc 'Log work on the issue before resolving'
  c.arg_name 'TIME'
  c.flag [:l, "log-work"]

  c.desc 'Set remaining estimate to zero'
  c.switch :Z

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {
      :as => options[:a]
    }
    params[:comment] = options[:comment] unless options[:comment].nil?
    if options["log-work"] or options[:Z]
      time = options["log-work"] || "1m"
      if options[:Z]
        params = {
          :remaining_estimate => 0
        }
      end
      JiraClient.create_worklog args[0], time, params
      puts "Logged #{time} on #{args[0]}"
    end
    JiraClient.resolve_issue args[0], params
    puts "Resolved #{args[0]} as #{options[:a]}"
  end
end

desc 'Close an issue'
arg_name 'ISSUE'
command :close do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    JiraClient.close_issue args[0], params
  end
end

desc 'Re-open an issue'
arg_name 'ISSUE'
command :reopen do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    JiraClient.reopen_issue args[0], params
    puts "#{args[0]} re-opened"
  end
end

desc 'Start progress on an issue'
arg_name 'ISSUE'
command "start-progress" do |c|
  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    JiraClient.start_progress_on_issue args[0]
    puts "Progress started on #{args[0]}"
  end
end

desc 'Log work on an issue'
arg_name 'ISSUE TIME'
command "log-work" do |c|
  c.desc 'Comment on the resolution'
  c.arg_name 'COMMENT'
  c.flag [:c, :comment]

  c.desc 'Set remaining estimate'
  c.arg_name 'TIME'
  c.flag [:r, "remaining-estimate"]

  c.action do |global_options, options, args|
    help_now! "Missing issue key" if args.length == 0
    help_now! "Missing time" if args.length == 1
    params = {}
    params[:comment] = options[:comment] unless options[:comment].nil?
    params[:remaining_estimate] = options["remaining-estimate"] unless options["remaining-estimate"].nil?
    JiraClient.create_worklog(args[0], args[1], params)
    puts "Logged #{args[1]} on #{args[0]}"
  end
end

desc 'Display information about Jira'
command :info do |c|
  c.action do |global_options,options,args|
    info = JiraClient.server_info
    puts "Server: #{info.server_title}"
    puts "URL: #{info.base_url}"
    puts "Version: #{info.version}"
  end
end

desc 'Display detailed information about an issue'
arg_name 'ISSUE'
command :show do |c|

  c.desc 'Display subtasks'
  c.switch [:s, :subtasks]

  c.desc 'Display description'
  c.default_value true
  c.switch [:d, :description]

  c.desc 'Display comments'
  c.switch [:c, :comments]

  c.action do |global_options,options,args|
    help_now! "Missing issue key" if args.length == 0
    fields = [:summary, :status, :issuetype]
    fields << :description if options[:description]
    fields << :subtasks if options[:subtasks]
    fields << :comment if options[:comments]
    issue = JiraClient.find_issue_by_key(args[0], :fields => fields)
    color = issue_color(issue)
    header = "#{issue.key}\t#{issue.summary}".colorize(color)
    puts "#{header} [#{issue.status.name.upcase}]"
    if options[:subtasks]
      puts
      puts "SUBTASKS"
      puts
      issue.subtasks.each do |subtask|
        puts "    #{subtask.key}\t#{subtask.summary} [#{subtask.status.name.upcase}]"
      end
      puts
    end
    if options[:description]
      puts
      puts "DESCRIPTION"
      puts
      puts "    #{issue.description}".gsub("\n", "\n    ") if options[:description]
    end
    if options[:comments]
      puts
      puts "COMMENTS"
      puts
      issue.comments.each do |comment|
        puts "    #{comment.author}: #{comment.created.strftime("%e-%b-%Y (%H:%M)")}"
        puts "    #{comment.body}"
        puts
      end
    end
  end
end

desc 'Search for issues using JQL'
arg_name 'JQL'
command :search do |c|
  c.action do |global_options,options,args|
    help_now! "Missing JQL statement" if args.length == 0
    issues = JiraClient.find_issues(:jql => args[0], :fields => [:summary, :status, :issuetype])
    issues.each do |issue|
      color = issue_color(issue)
      puts "#{issue.key}\t#{issue.summary}".colorize(color)
    end
    puts "No issues found" if issues.empty?
  end
end

desc 'Display issues currently in progress and assigned to you'
command :current do |c|
  c.action do |global_options,options,args|
    issues = JiraClient.find_issues(:jql => "assignee = currentUser() AND status = 'In Progress'", :fields => [:summary, :status])
    issues.each do |issue|
      puts "#{issue.key}\t#{issue.summary}"
    end
    puts "No issues found" if issues.empty?
  end
end

desc 'Tell Jira how you feel about it'
arg_name 'EXPLETIVE...'
command :rant do |c|
  c.action do |global_options,options,args|
    help_now! "Missing expletives" if args.length == 0
    raise "503 Service Unavailable"
  end
end

pre do |global,command,options,args|
  config = load_config(global)
  configure_client(config)
  true
end

def load_config(global_config)
  config_filename = File.join(ENV['HOME'], ".jiraa")

  config = if File.exists?(config_filename)
    read_config_file(config_filename)
  else
    create_config_file(config_filename, global_config)
  end

  config.merge! global_config
end

def read_config_file(filename)
  YAML.load_file(filename) || {}
end

def create_config_file(filename, config)
  url = config[:url] || "https://jira.example.com"
  username = config[:username] || "username"
  password = config[:password] || "password"
  certificate = config[:certificate] || "/usr/local/certificates/my_cert.pem"
  File.open(filename, 'w') do |file|
    file.write <<-EOF
---
# Enter the URL of your Jira instance here:
#{'#' unless config[:url]}url: #{url}

# If your Jira server uses HTTP basic authentication then fill in your username and password:
#{'#' unless config[:username]}username: #{username}
#{'#' unless config[:password]}password: #{password}

# If your Jira server users SSL certificate authentication then provide a path to your certificate:
#{'#' unless config[:certificate]}certificate: #{certificate}
EOF
    {}
  end
end

def configure_client(config)
  JiraClient.configure do |c|
    c.base_url = config["url"]
    c.certificate = config["certificate"]
    c.username = config["username"]
    c.password = config["password"]
    c.port = config["port"]
    c.proxy = ENV['https_proxy']
  end
end

def issue_color(issue)
  color = case issue.issuetype.name
  when "Bug"
    :red
  when "Task"
    :blue
  when "Story"
    :green
  end
  color
end

exit run(ARGV)
